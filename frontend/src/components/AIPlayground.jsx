import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { aiPlaygroundResponses } from '../data/mock';
import { 
  Send, 
  Bot, 
  Lightbulb, 
  Download,
  Copy,
  CheckCircle
} from 'lucide-react';

const AIPlayground = () => {
  const [input, setInput] = useState('');
  const [response, setResponse] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [copied, setCopied] = useState(false);

  const suggestedChallenges = [
    'optimize checkout for Pakistan market',
    'improve user retention for SaaS platform',
    'scale AI customer support'
  ];

  const handleSubmit = async (challenge = input) => {
    if (!challenge.trim()) return;
    
    setIsLoading(true);
    setInput(challenge);
    
    // Simulate AI processing time
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const mockResponse = aiPlaygroundResponses[challenge] || aiPlaygroundResponses['optimize checkout for Pakistan market'];
    setResponse(mockResponse);
    setIsLoading(false);
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const generatePDF = () => {
    // Mock PDF generation
    const content = `
Challenge: ${input}

Recommendations:
${response.bullets.map(bullet => `â€¢ ${bullet}`).join('\n')}

Action Items:
${response.tasks.map((task, i) => `${i + 1}. ${task}`).join('\n')}

Generated by Creative Energy AI
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'transformation-plan.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <section className="split-section" id="ai-playground">
      {/* Left Half - AI Playground Interface */}
      <div className="split-half black">
        <div className="w-full max-w-2xl">
          <motion.div
            initial={{ opacity: 0, x: -40 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <div className="flex items-center gap-3 mb-6">
              <Bot className="text-brand-primary" size={32} />
              <h2 className="display-medium">AI Playground</h2>
            </div>
            
            <p className="body-large text-text-secondary mb-8">
              Describe your challenge and get instant strategic recommendations powered by our AI.
            </p>
            
            {/* Input Area */}
            <div className="mb-6">
              <div className="relative">
                <textarea
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Describe your challenge... (e.g., 'optimize checkout for Pakistan market')"
                  className="w-full h-32 bg-bg-overlay border border-border-subtle p-4 text-text-primary placeholder-text-muted resize-none focus:border-brand-primary focus:outline-none transition-colors"
                  disabled={isLoading}
                />
                <motion.button
                  onClick={() => handleSubmit()}
                  disabled={!input.trim() || isLoading}
                  className="absolute bottom-4 right-4 btn-primary px-4 py-2 min-h-auto disabled:opacity-50"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  {isLoading ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                    >
                      <Bot size={16} />
                    </motion.div>
                  ) : (
                    <Send size={16} />
                  )}
                </motion.button>
              </div>
            </div>
            
            {/* Suggested Challenges */}
            <div>
              <p className="body-medium text-text-secondary mb-4">Try these examples:</p>
              <div className="space-y-2">
                {suggestedChallenges.map((challenge) => (
                  <motion.button
                    key={challenge}
                    onClick={() => handleSubmit(challenge)}
                    className="block w-full text-left p-3 bg-bg-overlay border border-border-subtle hover:border-brand-primary text-text-secondary hover:text-brand-primary transition-all duration-300"
                    whileHover={{ x: 5 }}
                    disabled={isLoading}
                  >
                    "{challenge}"
                  </motion.button>
                ))}
              </div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Right Half - AI Response */}
      <div className="split-half content">
        <div className="w-full max-w-2xl">
          {!response && !isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex items-center justify-center h-full text-center"
            >
              <div>
                <Lightbulb className="text-brand-primary mx-auto mb-4" size={48} />
                <h3 className="heading-2 mb-4">Ready to solve your challenge</h3>
                <p className="body-medium text-text-secondary">
                  Enter your challenge on the left to get instant AI-powered recommendations.
                </p>
              </div>
            </motion.div>
          )}

          {isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex items-center justify-center h-full"
            >
              <div className="text-center">
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                  className="w-16 h-16 border-4 border-brand-primary border-t-transparent rounded-full mx-auto mb-4"
                />
                <h3 className="heading-3 mb-2">Analyzing your challenge...</h3>
                <p className="body-medium text-text-secondary">Our AI is crafting personalized recommendations</p>
              </div>
            </motion.div>
          )}

          {response && (
            <motion.div
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
            >
              <div className="mb-6">
                <h3 className="heading-2 mb-4 text-brand-primary">Strategic Recommendations</h3>
                <div className="bg-bg-overlay border border-border-subtle p-6">
                  <h4 className="heading-3 mb-4">Key Insights</h4>
                  <ul className="space-y-3">
                    {response.bullets.map((bullet, index) => (
                      <motion.li
                        key={index}
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.5, delay: index * 0.1 }}
                        className="flex items-start gap-3"
                      >
                        <CheckCircle className="text-brand-primary mt-1 flex-shrink-0" size={16} />
                        <span className="body-medium">{bullet}</span>
                      </motion.li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="mb-6">
                <h4 className="heading-3 mb-4">Action Plan</h4>
                <div className="bg-bg-overlay border border-border-subtle p-6">
                  <ol className="space-y-3">
                    {response.tasks.map((task, index) => (
                      <motion.li
                        key={index}
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.5, delay: 0.5 + index * 0.1 }}
                        className="flex items-start gap-3"
                      >
                        <span className="w-6 h-6 bg-brand-primary text-black rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0">
                          {index + 1}
                        </span>
                        <span className="body-medium">{task}</span>
                      </motion.li>
                    ))}
                  </ol>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-4">
                <motion.button
                  onClick={generatePDF}
                  className="btn-primary"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Download size={16} />
                  Download Plan
                </motion.button>
                
                <motion.button
                  onClick={() => copyToClipboard(`${response.bullets.join('\n')}\n\n${response.tasks.join('\n')}`)}
                  className="btn-secondary"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  {copied ? <CheckCircle size={16} /> : <Copy size={16} />}
                  {copied ? 'Copied!' : 'Copy to Clipboard'}
                </motion.button>
              </div>
            </motion.div>
          )}
        </div>
      </div>
    </section>
  );
};

export default AIPlayground;